let nengi,nengiConfig,instanceHookAPI,NetLog,PlayerCharacter;_5fd‍.x([["update",()=>update]]);_5fd‍.w("nengi",[["default",["nengi"],function(v){nengi=v}]]);_5fd‍.w("../common/nengiConfig.js",[["default",["nengiConfig"],function(v){nengiConfig=v}]]);_5fd‍.w("./instanceHookAPI.js",[["default",["instanceHookAPI"],function(v){instanceHookAPI=v}]]);_5fd‍.w("../common/NetLog.js",[["default",["NetLog"],function(v){NetLog=v}]]);_5fd‍.w("../common/PlayerCharacter.js",[["default",["PlayerCharacter"],function(v){PlayerCharacter=v}]]);





const instance = new nengi.Instance(nengiConfig, { port: 8079 })
instanceHookAPI(instance)

const entities = new Map()
/* serverside state here */

instance.on('connect', ({ client, callback }) => {
    /* client init logic & state can go here */
    callback({ accepted: true, text: 'Welcome!' })
    instance.message(new NetLog('hello world'), client)
    const entity = new PlayerCharacter()
    instance.addEntity(entity)
    entities.set(entity.nid, entity)
})

instance.on('disconnect', client => {
    // disconnected
    entities.delete(client.entity.nid)
    instance.removeEntity(client.entity)
})

/* on('command::AnyCommand', ({ command, client }) => { }) */

const update = (delta, tick, now) => {
    instance.emitCommands()
    /* serverside logic can go here */
    entities.forEach(entity => {
        entity.x += 1
    })
    instance.update()
}




