let Chunk,Binary,BinaryType,writePartial;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../../protocol/write/writeSingle",[["default",["writePartial"],function(v){writePartial=v}]]);




function writeSingleProps(chunkType, bitStream, singleProps) {
    if (singleProps.length > 0) {

        // ChunkType CreateEntities
        bitStream[Binary[BinaryType.UInt8].write](chunkType)

        // number of entities
        bitStream[Binary[BinaryType.UInt16].write](singleProps.length)


        for (var i = 0; i < singleProps.length; i++) {
            writePartial(bitStream, singleProps[i])
        }
        
        /*
        singleProps.forEach(singleProp => {
            writePartial(bitStream, singleProp)
        })
        */
    }
}

_34e‍.d(writeSingleProps);