let Chunk,BinaryType,Binary,writeMessage;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../protocol/write/writeMessage",[["default",["writeMessage"],function(v){writeMessage=v}]]);




function writeEngineMessages(bitStream, messages) {
    if (messages.length > 0) {

        // ChunkType CreateEntities
        bitStream[Binary[BinaryType.UInt8].write](Chunk.Engine)

        // number of messages
        bitStream[Binary[BinaryType.UInt16].write](messages.length)

        messages.forEach(message => {
            writeMessage(bitStream, message, message.protocol)
        })
    }
}

_34e‍.d(writeEngineMessages);