let Chunk,BinaryType,Binary,writeBatch;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../protocol/write/writeBatch",[["default",["writeBatch"],function(v){writeBatch=v}]]);




function writeBatches(bitStream, batches) {
    if (batches.length > 0) {

        bitStream[Binary[BinaryType.UInt8].write](Chunk.UpdateEntitiesOptimized)
        bitStream[Binary[BinaryType.UInt16].write](batches.length)

        batches.forEach(batch => {
            writeBatch(bitStream, batch)
        })
    }
}

_34e‍.d(writeBatches);