let BinaryType,Bool,UInt2,UInt3,UInt4,UInt5,UInt6,UInt7,UInt8,UInt9,UInt10,UInt11,UInt12,UInt16,UInt32,Int4,Int6,Int8,Int10,Int16,Int32,Float32,Float64,EntityId,Rotation8,RotationFloat32,RGB888,ASCIIString,UTF8String;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("./BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("./types/Boolean",[["default",["Bool"],function(v){Bool=v}]]);_34e‍.w("./types/UInt2",[["default",["UInt2"],function(v){UInt2=v}]]);_34e‍.w("./types/UInt3",[["default",["UInt3"],function(v){UInt3=v}]]);_34e‍.w("./types/UInt4",[["default",["UInt4"],function(v){UInt4=v}]]);_34e‍.w("./types/UInt5",[["default",["UInt5"],function(v){UInt5=v}]]);_34e‍.w("./types/UInt6",[["default",["UInt6"],function(v){UInt6=v}]]);_34e‍.w("./types/UInt7",[["default",["UInt7"],function(v){UInt7=v}]]);_34e‍.w("./types/UInt8",[["default",["UInt8"],function(v){UInt8=v}]]);_34e‍.w("./types/UInt9",[["default",["UInt9"],function(v){UInt9=v}]]);_34e‍.w("./types/UInt10",[["default",["UInt10"],function(v){UInt10=v}]]);_34e‍.w("./types/UInt11",[["default",["UInt11"],function(v){UInt11=v}]]);_34e‍.w("./types/UInt12",[["default",["UInt12"],function(v){UInt12=v}]]);_34e‍.w("./types/UInt16",[["default",["UInt16"],function(v){UInt16=v}]]);_34e‍.w("./types/UInt32",[["default",["UInt32"],function(v){UInt32=v}]]);_34e‍.w("./types/Int4",[["default",["Int4"],function(v){Int4=v}]]);_34e‍.w("./types/Int6",[["default",["Int6"],function(v){Int6=v}]]);_34e‍.w("./types/Int8",[["default",["Int8"],function(v){Int8=v}]]);_34e‍.w("./types/Int10",[["default",["Int10"],function(v){Int10=v}]]);_34e‍.w("./types/Int16",[["default",["Int16"],function(v){Int16=v}]]);_34e‍.w("./types/Int32",[["default",["Int32"],function(v){Int32=v}]]);_34e‍.w("./types/Float32",[["default",["Float32"],function(v){Float32=v}]]);_34e‍.w("./types/Float64",[["default",["Float64"],function(v){Float64=v}]]);_34e‍.w("./types/EntityId",[["default",["EntityId"],function(v){EntityId=v}]]);_34e‍.w("./types/Rotation8",[["default",["Rotation8"],function(v){Rotation8=v}]]);_34e‍.w("./types/RotationFloat32",[["default",["RotationFloat32"],function(v){RotationFloat32=v}]]);_34e‍.w("./types/RGB888",[["default",["RGB888"],function(v){RGB888=v}]]);_34e‍.w("./types/ASCIIString",[["default",["ASCIIString"],function(v){ASCIIString=v}]]);_34e‍.w("./types/UTF8String",[["default",["UTF8String"],function(v){UTF8String=v}]]);




































var Binary = {}

/* unsigned! 0 to n */
// 0 to 1, false or true
Binary[BinaryType.Boolean] = Bool
// 0 to 3
Binary[BinaryType.UInt2] = UInt2
// 0 to 7
Binary[BinaryType.UInt3] = UInt3
// 0 to 15
Binary[BinaryType.UInt4] = UInt4
// 0 to 31
Binary[BinaryType.UInt5] = UInt5
// 0 to 63
Binary[BinaryType.UInt6] = UInt6
// 0 to 127
Binary[BinaryType.UInt7] = UInt7
// 0 to 255
Binary[BinaryType.UInt8] = UInt8
// 0 to 511
Binary[BinaryType.UInt9] = UInt9
// 0 to 1023
Binary[BinaryType.UInt10] = UInt10
// 0 to 2047
Binary[BinaryType.UInt11] = UInt11
// 0 to 4095
Binary[BinaryType.UInt12] = UInt12
// 0 to 65535
Binary[BinaryType.UInt16] = UInt16
// 0 to 4294967295
Binary[BinaryType.UInt32] = UInt32

/* signed! includes negative numbers */
// -8 to 7
Binary[BinaryType.Int4] = Int4
// -32 to 31
Binary[BinaryType.Int6] = Int6
// -128 to 127
Binary[BinaryType.Int8] = Int8
// -512 to 511
Binary[BinaryType.Int10] = Int10
// -32768 to 32767
Binary[BinaryType.Int16] = Int16
// -2147483648 to 2147483647
Binary[BinaryType.Int32] = Int32

Binary[BinaryType.Float32] = Float32

Binary[BinaryType.Float64] = Float64

/* special fancy types! */
Binary[BinaryType.EntityId] = EntityId
// rotation in radians networked in one byte
Binary[BinaryType.Rotation8] = Rotation8
Binary[BinaryType.RotationFloat32] = RotationFloat32
// an RGB color, with one byte for each component
Binary[BinaryType.RGB888] = RGB888
// String support, ASCIIStrings up to 255 characters
Binary[BinaryType.ASCIIString] = ASCIIString
// utf8 strings, potentially huge
Binary[BinaryType.UTF8String] = UTF8String

Binary.countBits = function(propConfig, value) {
    var binaryMeta = Binary[propConfig.type]
    if (propConfig.isArray) {
        var totalBits = 0
        var arrayIndexBinaryMeta = Binary[propConfig.arrayIndexBinaryType]
        totalBits += arrayIndexBinaryMeta.bits
        if (binaryMeta.customBits) {
            totalBits += binaryMeta.countBits(value) * value.length
        } else {
            totalBits += binaryMeta.bits * value.length
        }
        return totalBits
    } else {
       if (binaryMeta.customBits) {
            return binaryMeta.countBits(value)
        } else {
            return binaryMeta.bits
        } 
    }
}

_34e‍.d(Binary);