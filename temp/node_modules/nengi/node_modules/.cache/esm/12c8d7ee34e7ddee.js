let Binary,BinaryType,BitBuffer,BitStream,Chunk,ChunkReverse,readCommands,readPong,readTransferRequest,readTransferResponse;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../../binary/BitBuffer",[["default",["BitBuffer"],function(v){BitBuffer=v}]]);_34e‍.w("../../binary/BitStream",[["default",["BitStream"],function(v){BitStream=v}]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}],["ChunkReverse",["ChunkReverse"],function(v){ChunkReverse=v}]]);_34e‍.w("./readCommands",[["default",["readCommands"],function(v){readCommands=v}]]);_34e‍.w("./readPong",[["default",["readPong"],function(v){readPong=v}]]);_34e‍.w("./readTransferRequest",[["default",["readTransferRequest"],function(v){readTransferRequest=v}]]);_34e‍.w("./readTransferResponse",[["default",["readTransferResponse"],function(v){readTransferResponse=v}]]);










function readCommandBuffer(arrayBuffer, protocols, config) {
    //console.log(arrayBuffer)
    var bitBuffer = new BitBuffer(arrayBuffer)
    var bitStream = new BitStream(bitBuffer)

    var ret = {
        transferResponse: -1,
        transferRequest: -1,
        handshake: -1,
        tick: -1,
        pong: -1,
        commands: []
    }

    while (bitStream.offset + 16 <= bitBuffer.bitLength) {
        //console.log('while', bitStream.offset, bitBuffer.bitLength)
        var msgType = bitStream.readUInt8()
        //console.log('readcommandbuffer', msgType, ChunkReverse[msgType])

        switch (msgType) {
            case Chunk.Handshake:
                //console.log('HERE')
                ret.handshake = JSON.parse(Binary[BinaryType.UTF8String].read(bitStream))
                //console.log('handshake', ret.handshake)
               // if (!ret.handshake) {
                //    throw new Error('Invalid handshake')
                //}
                break
            case Chunk.ClientTick:
                ret.tick = bitStream.readUInt32()
                //console.log('clienttick', ret.tick)
                break
            case Chunk.Pong:
                ret.pong = bitStream.readUInt8()
                //console.log('pong', ret.pong)
                break
            case Chunk.Commands:
                ret.commands = readCommands(bitStream, protocols, config)
                //console.log('commands', ret.commands)
                break
            default:
                //console.log('unknown data from client')
                break
        }
    }

    return ret
}

_34e‍.d(readCommandBuffer);