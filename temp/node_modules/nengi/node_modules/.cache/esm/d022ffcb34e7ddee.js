let BitBuffer,BitStream,Binary,BinaryType,Chunk;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../../binary/BitBuffer",[["default",["BitBuffer"],function(v){BitBuffer=v}]]);_34e‍.w("../../binary/BitStream",[["default",["BitStream"],function(v){BitStream=v}]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}]]);





function createTransferResponseBuffer(password, approved, transferKey) {
    var bits = 8
    bits += Binary[BinaryType.UTF8String].countBits(password)
    bits += 2
    bits += Binary[BinaryType.UTF8String].countBits(transferKey)

    var bitBuffer = new BitBuffer(bits)
    var bitStream = new BitStream(bitBuffer)

    bitStream.writeUInt8(Chunk.TransferResponse)
    Binary[BinaryType.UTF8String].write(bitStream, password)
    bitStream.writeBoolean(approved)
    Binary[BinaryType.UTF8String].write(bitStream, transferKey)

    return bitBuffer
}

_34e‍.d(createTransferResponseBuffer);