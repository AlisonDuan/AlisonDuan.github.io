let Binary,BitBuffer,BitStream,readBatches,readSingleProps,readCreateEntities,readDeleteEntities,readLocalEvents,readMessages,readJSONs,readTimesync,readPing,readTransfer,readConnectionResponse,readEngineMessages,Chunk,ChunkReverse;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../binary/BitBuffer",[["default",["BitBuffer"],function(v){BitBuffer=v}]]);_34e‍.w("../../binary/BitStream",[["default",["BitStream"],function(v){BitStream=v}]]);_34e‍.w("./readBatches",[["default",["readBatches"],function(v){readBatches=v}]]);_34e‍.w("./readSingleProps",[["default",["readSingleProps"],function(v){readSingleProps=v}]]);_34e‍.w("./readCreateEntities",[["default",["readCreateEntities"],function(v){readCreateEntities=v}]]);_34e‍.w("./readDeleteEntities",[["default",["readDeleteEntities"],function(v){readDeleteEntities=v}]]);_34e‍.w("./readLocalEvents",[["default",["readLocalEvents"],function(v){readLocalEvents=v}]]);_34e‍.w("./readMessages",[["default",["readMessages"],function(v){readMessages=v}]]);_34e‍.w("./readJSONs",[["default",["readJSONs"],function(v){readJSONs=v}]]);_34e‍.w("./readTimesync",[["default",["readTimesync"],function(v){readTimesync=v}]]);_34e‍.w("./readPing",[["default",["readPing"],function(v){readPing=v}]]);_34e‍.w("./readTransfer",[["default",["readTransfer"],function(v){readTransfer=v}]]);_34e‍.w("./readConnectionResponse",[["default",["readConnectionResponse"],function(v){readConnectionResponse=v}]]);_34e‍.w("./readEngineMessages",[["default",["readEngineMessages"],function(v){readEngineMessages=v}]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}],["ChunkReverse",["ChunkReverse"],function(v){ChunkReverse=v}]]);















//var config = require('../../../config')






function readSnapshotBuffer(arrayBuffer, protocols, config, connectCallback, transferCallback, protocolResolver) {
    var bitBuffer = new BitBuffer(arrayBuffer)
    var bitStream = new BitStream(bitBuffer)

    //console.log(bitStream)

    var snapshot = {
        tick: 0,
        clientTick: -1,

        timestamp: -1,
        pingKey: -1,
        avgLatency: -1,


        engineMessages: [],


        // a copy of all visible events
        localMessages: [],

        // a copy of all messages
        messages: [],

        jsons: [],

        // a copy of all visible entities
        createEntities: [],

        // ids of entites no longer relevant to client
        deleteEntities: [],

        // updates to individual entities, using varying optimizations
        updateEntities: {
            // not used
            full: [],
            // per-property updates
            partial: [],
            // microOptimizations
            optimized: []
        },

        createComponents: [],
        deleteComponents: [],

        updateComponents: {
            // not used
            full: [],
            // per-property updates
            partial: [],
            // microOptimizations
            optimized: []
        }

    }

    //var timestamp = bitStream.readFloat64()
    //console.log(Date.now() - timestamp)
    //snapshot.timestamp = timestamp
    //snapshot.clientTick = bitStream.readUInt32()

    //console.log('+==================================+')
    while (bitStream.offset + 16 <= bitBuffer.bitLength) {
        //console.log('while', bitStream.offset, bitBuffer.bitLength)
        var msgType = bitStream.readUInt8()
        //console.log(msgType, ChunkReverse[msgType])

        switch (msgType) {
            case Chunk.Engine: 
                var engineMessages = readEngineMessages(bitStream, protocols, config)
                snapshot.engineMessages = engineMessages
                break
            case Chunk.ClientTick:
                snapshot.clientTick = bitStream.readUInt32()
                break
            case Chunk.Ping:
                var pingKey = readPing(bitStream)
                snapshot.pingKey = pingKey
                break
            case Chunk.Timesync:
                var times = readTimesync(bitStream)
                //console.log('READ Timesync', times)
                snapshot.timestamp = times.time
                snapshot.avgLatency = times.avgLatency
                break
            case Chunk.CreateEntities:
                var entities = readMessages(bitStream, protocols, config)
                //console.log('READ ENTITIES', entities)
                snapshot.createEntities = entities
                break
            case Chunk.UpdateEntitiesPartial:
                var singleProps = readSingleProps(bitStream, protocolResolver, config)
                //console.log('SINGLE PROPS', singleProps)
                snapshot.updateEntities.partial = singleProps
                break
            case Chunk.UpdateEntitiesOptimized:
                var batches = readBatches(bitStream, protocolResolver)
                //console.log('BATCHES', batches)
                snapshot.updateEntities.optimized = batches
                break
            case Chunk.DeleteEntities:
                var deleteEntities = readDeleteEntities(bitStream, config)
                //console.log('DeleteEntities', deleteEntities)
                snapshot.deleteEntities = deleteEntities
                break
            case Chunk.LocalEvents:
                //console.log('prot', protocols)
                var localEvents = readMessages(bitStream, protocols, config)
                snapshot.localMessages = localEvents
                break
            case Chunk.Messages:
                var messages = readMessages(bitStream, protocols, config)
                snapshot.messages = messages
                break
            case Chunk.JSONs:
                var jsons = readJSONs(bitStream)
                snapshot.jsons = jsons
                break
            case Chunk.ConnectionResponse: 
                var response = readConnectionResponse(bitStream)
                connectCallback(response)
                return // exit this code! not a normal snapshot
            default:
                break
        }
    }
    //console.log('ss',snapshot)
   // entityCache.saveSnapshot(snapshot)
    
    return snapshot //simplifySnapshot(snapshot, entityCache)
    

}

_34e‍.d(readSnapshotBuffer);