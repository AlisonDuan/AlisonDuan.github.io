let BitBuffer,BitStream,Chunk,BinaryType,Binary;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../../binary/BitBuffer",[["default",["BitBuffer"],function(v){BitBuffer=v}]]);_34e‍.w("../../binary/BitStream",[["default",["BitStream"],function(v){BitStream=v}]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);





function createConnectionReponseBuffer(acceptConnection, text) {
    var bits = 8
    bits += 2
    bits += Binary[BinaryType.UTF8String].countBits(text)

    var bitBuffer = new BitBuffer(bits)
    var bitStream = new BitStream(bitBuffer)

    bitStream[Binary[BinaryType.UInt8].write](Chunk.ConnectionResponse)
    bitStream.writeBoolean(acceptConnection)
    Binary[BinaryType.UTF8String].write(bitStream, text)

    return bitBuffer
}

_34e‍.d(createConnectionReponseBuffer);
