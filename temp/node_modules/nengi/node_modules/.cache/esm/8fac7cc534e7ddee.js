let Chunk,BinaryType,Binary,writeMessage;_34e‍.x([["default",()=>_34e‍.o]]);_34e‍.w("../Chunk",[["Chunk",["Chunk"],function(v){Chunk=v}]]);_34e‍.w("../../binary/BinaryType",[["default",["BinaryType"],function(v){BinaryType=v}]]);_34e‍.w("../../binary/Binary",[["default",["Binary"],function(v){Binary=v}]]);_34e‍.w("../../protocol/write/writeMessage",[["default",["writeMessage"],function(v){writeMessage=v}]]);




function writeCommands(bitStream, commands) {

    // note: it is possible to write 0 commands
    // in which case the chunktype and 0 are still sent
    //console.log('writing commands', commands)
    // ChunkType Commands
    bitStream[Binary[BinaryType.UInt8].write](Chunk.Commands)

    // number of Commands
    bitStream[Binary[BinaryType.UInt16].write](commands.length)

    for (var i = 0; i < commands.length; i++) {
        var command = commands[i]
        writeMessage(bitStream, command, command.protocol)
    }
    
}

_34e‍.d(writeCommands);